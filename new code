<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaxEase - Auto Tax Filing Demo</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body { 
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #1f2937;
        }
        
        .gradient-bg { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
        }
        
        .animate-float { 
            animation: float 3s ease-in-out infinite; 
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .card-hover {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .card-hover:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }
        
        .progress-bar {
            transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .slide-in {
            animation: slideIn 0.5s ease-out;
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-20px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        .fade-in {
            animation: fadeIn 0.6s ease-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .notification-success {
            background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
            border-left: 4px solid #10b981;
        }
        
        .notification-warning {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border-left: 4px solid #f59e0b;
        }
        
        .notification-info {
            background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
            border-left: 4px solid #3b82f6;
        }
        
        .glass-effect {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .stat-counter {
            font-variant-numeric: tabular-nums;
        }
        
        .input-focus:focus {
            ring: 2px;
            ring-color: #6366f1;
            border-color: #6366f1;
        }
        
        .logo-glow {
            filter: drop-shadow(0 0 10px rgba(99, 102, 241, 0.3));
        }
        
        .hero-text {
            background: linear-gradient(135deg, #ffffff 0%, #f3f4f6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .feature-card {
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
            border: 1px solid rgba(148, 163, 184, 0.1);
        }
        
        .step-indicator {
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        }
        
        .status-complete {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }
        
        .status-progress {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        }
        
        .refund-highlight {
            background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
            border: 2px solid #10b981;
        }
        
        .nav-active {
            background: linear-gradient(135deg, #eef2ff 0%, #e0e7ff 100%);
            color: #4f46e5;
            border-radius: 6px;
        }
        
        .spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #6366f1;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error-shake {
            animation: shake 0.5s ease-in-out;
        }
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
    </style>
</head>
<body class="bg-gray-50 antialiased">
    <div id="root"></div>

    <script type="text/babel">
        'use strict';
        
        const { useState, useEffect, useCallback, useMemo } = React;

        // Configuration and constants
        const APP_CONFIG = {
            name: 'TaxEase',
            version: '1.0.0',
            features: {
                multiStep: true,
                realTimeValidation: true,
                progressTracking: true
            }
        };

        const ROUTES = {
            HOME: 'home',
            LOGIN: 'login',
            REGISTER: 'register',
            DASHBOARD: 'dashboard',
            DOCUMENTS: 'documents',
            FORMS: 'forms',
            REVIEW: 'review',
            PAYMENT: 'payment'
        };

        // Mock data with enhanced structure
        const MOCK_DATA = {
            user: {
                id: 'user_123',
                email: 'john.doe@example.com',
                name: 'John Doe',
                isLoggedIn: false,
                avatar: null,
                preferences: {
                    theme: 'light',
                    notifications: true
                }
            },
            stats: {
                totalFiled: 2847,
                avgRefund: 2456,
                satisfaction: 98.7,
                avgTime: 17,
                successRate: 99.2
            },
            taxSummary: {
                totalIncome: 89750,
                federalTax: 16852,
                stateTax: 7235,
                totalWithheld: 25650,
                federalRefund: 1245,
                stateRefund: 318,
                effectiveRate: 18.2
            },
            notifications: [
                {
                    id: 'notif_1',
                    type: 'success',
                    title: 'Document Processed',
                    message: 'W-2 from TechCorp processed successfully',
                    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
                    read: false
                },
                {
                    id: 'notif_2',
                    type: 'info',
                    title: 'Calculation Updated',
                    message: 'State tax calculation updated based on new data',
                    timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000),
                    read: false
                },
                {
                    id: 'notif_3',
                    type: 'warning',
                    title: 'Action Required',
                    message: 'Upload 1099 form to complete your return',
                    timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
                    read: true
                }
            ]
        };

        // Utility functions
        const formatCurrency = (amount) => {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        };

        const formatTimeAgo = (timestamp) => {
            const now = new Date();
            const diff = now - timestamp;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);

            if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
            if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
            if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
            return 'Just now';
        };

        const validateEmail = (email) => {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        };

        const validatePassword = (password) => {
            return password.length >= 8;
        };

        // Custom hooks
        const useLocalStorage = (key, initialValue) => {
            const [storedValue, setStoredValue] = useState(() => {
                try {
                    const item = window.localStorage.getItem(key);
                    return item ? JSON.parse(item) : initialValue;
                } catch (error) {
                    console.warn(`Error reading localStorage key "${key}":`, error);
                    return initialValue;
                }
            });

            const setValue = useCallback((value) => {
                try {
                    setStoredValue(value);
                    window.localStorage.setItem(key, JSON.stringify(value));
                } catch (error) {
                    console.warn(`Error setting localStorage key "${key}":`, error);
                }
            }, [key]);

            return [storedValue, setValue];
        };

        const useAnimatedCounter = (end, duration = 2000) => {
            const [count, setCount] = useState(0);

            useEffect(() => {
                let startTime = null;
                const animate = (currentTime) => {
                    if (!startTime) startTime = currentTime;
                    const progress = Math.min((currentTime - startTime) / duration, 1);
                    setCount(Math.floor(progress * end));
                    
                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    }
                };
                
                requestAnimationFrame(animate);
            }, [end, duration]);

            return count;
        };

        // Components
        const Logo = ({ className = "" }) => (
            <div className={`flex items-center ${className}`}>
                <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center mr-2 logo-glow">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                </div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    {APP_CONFIG.name}
                </h1>
            </div>
        );

        const Button = ({ 
            children, 
            variant = 'primary', 
            size = 'medium', 
            onClick, 
            disabled = false, 
            loading = false,
            className = "",
            ...props 
        }) => {
            const baseClasses = "inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2";
            
            const variants = {
                primary: "bg-gradient-to-r from-indigo-600 to-purple-600 text-white hover:from-indigo-700 hover:to-purple-700 focus:ring-indigo-500 btn-primary",
                secondary: "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-indigo-500",
                outline: "bg-transparent border-2 border-white text-white hover:bg-white hover:text-indigo-600 focus:ring-white",
                ghost: "bg-transparent text-gray-700 hover:bg-gray-100 focus:ring-gray-500"
            };

            const sizes = {
                small: "px-3 py-1.5 text-sm",
                medium: "px-4 py-2 text-sm",
                large: "px-6 py-3 text-base"
            };

            const disabledClasses = disabled ? "opacity-50 cursor-not-allowed" : "";
            const loadingClasses = loading ? "cursor-wait" : "";

            return (
                <button
                    className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${disabledClasses} ${loadingClasses} ${className}`}
                    onClick={onClick}
                    disabled={disabled || loading}
                    {...props}
                >
                    {loading && (
                        <div className="spinner mr-2"></div>
                    )}
                    {children}
                </button>
            );
        };

        const Input = ({ 
            label, 
            error, 
            helpText, 
            className = "", 
            inputClassName = "",
            ...props 
        }) => (
            <div className={className}>
                {label && (
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        {label}
                    </label>
                )}
                <input
                    className={`w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors ${error ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''} ${inputClassName}`}
                    {...props}
                />
                {error && (
                    <p className="mt-1 text-sm text-red-600">{error}</p>
                )}
                {helpText && !error && (
                    <p className="mt-1 text-sm text-gray-500">{helpText}</p>
                )}
            </div>
        );

        const Card = ({ children, className = "", hover = false, ...props }) => (
            <div 
                className={`bg-white rounded-lg shadow-lg ${hover ? 'card-hover' : ''} ${className}`}
                {...props}
            >
                {children}
            </div>
        );

        const ProgressBar = ({ value, max = 100, className = "", showLabel = true }) => {
            const percentage = Math.min((value / max) * 100, 100);
            
            return (
                <div className={`w-full ${className}`}>
                    {showLabel && (
                        <div className="flex justify-between items-center mb-2">
                            <span className="text-sm font-medium text-gray-700">Progress</span>
                            <span className="text-sm text-gray-500">{Math.round(percentage)}%</span>
                        </div>
                    )}
                    <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                            className="bg-gradient-to-r from-indigo-600 to-purple-600 h-2 rounded-full progress-bar"
                            style={{ width: `${percentage}%` }}
                        />
                    </div>
                </div>
            );
        };

        const StatCard = ({ title, value, icon, trend, className = "" }) => (
            <Card className={`p-6 ${className}`} hover>
                <div className="flex items-center justify-between">
                    <div>
                        <p className="text-sm font-medium text-gray-600">{title}</p>
                        <p className="text-2xl font-bold text-gray-900 stat-counter">{value}</p>
                        {trend && (
                            <p className={`text-sm ${trend.positive ? 'text-green-600' : 'text-red-600'}`}>
                                {trend.value}
                            </p>
                        )}
                    </div>
                    <div className="p-3 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full">
                        {icon}
                    </div>
                </div>
            </Card>
        );

        const Notification = ({ notification, onClose }) => {
            const typeStyles = {
                success: 'notification-success text-green-800',
                warning: 'notification-warning text-yellow-800',
                info: 'notification-info text-blue-800',
                error: 'bg-red-50 border-red-200 text-red-800'
            };

            const icons = {
                success: <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />,
                warning: <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />,
                info: <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />,
                error: <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            };

            return (
                <div className={`p-4 rounded-lg border ${typeStyles[notification.type]} slide-in`}>
                    <div className="flex items-start">
                        <div className="flex-shrink-0">
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                {icons[notification.type]}
                            </svg>
                        </div>
                        <div className="ml-3 flex-1">
                            <h3 className="text-sm font-medium">{notification.title}</h3>
                            <p className="text-sm opacity-90 mt-1">{notification.message}</p>
                            <p className="text-xs opacity-75 mt-2">{formatTimeAgo(notification.timestamp)}</p>
                        </div>
                        {onClose && (
                            <button
                                onClick={onClose}
                                className="ml-4 flex-shrink-0 opacity-75 hover:opacity-100 transition-opacity"
                            >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        )}
                    </div>
                </div>
            );
        };

        // Navigation Component
        const Navigation = ({ currentPage, setCurrentPage, user, setUser }) => {
            const handleLogout = useCallback(() => {
                setUser(prev => ({ ...prev, isLoggedIn: false }));
                setCurrentPage(ROUTES.HOME);
            }, [setUser, setCurrentPage]);

            const navItems = useMemo(() => [
                { id: ROUTES.DASHBOARD, label: 'Dashboard', requiresAuth: true },
                { id: ROUTES.DOCUMENTS, label: 'Documents', requiresAuth: true },
                { id: ROUTES.FORMS, label: 'Tax Forms', requiresAuth: true }
            ], []);

            return (
                <nav className="bg-white shadow-lg sticky top-0 z-50 glass-effect">
                    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        <div className="flex justify-between items-center h-16">
                            <div className="flex items-center">
                                <Logo className="cursor-pointer" onClick={() => setCurrentPage(ROUTES.HOME)} />
                            </div>
                            
                            <div className="hidden md:flex items-center space-x-4">
                                {user.isLoggedIn ? (
                                    <>
                                        {navItems.map(item => (
                                            <button
                                                key={item.id}
                                                onClick={() => setCurrentPage(item.id)}
                                                className={`px-3 py-2 rounded-md text-sm font-medium transition-all duration-200 ${
                                                    currentPage === item.id 
                                                        ? 'nav-active' 
                                                        : 'text-gray-700 hover:text-indigo-600'
                                                }`}
                                            >
                                                {item.label}
                                            </button>
                                        ))}
                                        <div className="relative group">
                                            <button className="flex items-center text-gray-700 hover:text-indigo-600 px-3 py-2 rounded-md text-sm font-medium transition-colors">
                                                <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center mr-2">
                                                    <span className="text-white text-sm font-medium">
                                                        {user.name.split(' ').map(n => n[0]).join('')}
                                                    </span>
                                                </div>
                                                {user.name}
                                                <svg className="w-4 h-4 ml-1 transition-transform group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                                </svg>
                                            </button>
                                            <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform translate-y-1 group-hover:translate-y-0">
                                                <div className="py-1">
                                                    <button 
                                                        onClick={handleLogout}
                                                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                                                    >
                                                        Logout
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </>
                                ) : (
                                    <>
                                        <Button
                                            variant="ghost"
                                            onClick={() => setCurrentPage(ROUTES.LOGIN)}
                                        >
                                            Login
                                        </Button>
                                        <Button
                                            variant="primary"
                                            onClick={() => setCurrentPage(ROUTES.REGISTER)}
                                        >
                                            Get Started
                                        </Button>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                </nav>
            );
        };

        // Home Page Component
        const HomePage = ({ setCurrentPage }) => {
            const [currentStatIndex, setCurrentStatIndex] = useState(0);
            const animatedTotal = useAnimatedCounter(MOCK_DATA.stats.totalFiled);
            const animatedRefund = useAnimatedCounter(MOCK_DATA.stats.avgRefund);
            const animatedSatisfaction = useAnimatedCounter(MOCK_DATA.stats.satisfaction * 10) / 10;

            const stats = useMemo(() => [
                { label: 'Tax Returns Filed', value: animatedTotal.toLocaleString(), suffix: '+' },
                { label: 'Average Refund', value: formatCurrency(animatedRefund), suffix: '' },
                { label: 'Customer Satisfaction', value: animatedSatisfaction.toFixed(1), suffix: '%' },
                { label: 'Average Filing Time', value: MOCK_DATA.stats.avgTime, suffix: ' min' }
            ], [animatedTotal, animatedRefund, animatedSatisfaction]);

            useEffect(() => {
                const interval = setInterval(() => {
                    setCurrentStatIndex((prev) => (prev + 1) % stats.length);
                }, 3000);
                return () => clearInterval(interval);
            }, [stats.length]);

            const features = useMemo(() => [
                {
                    icon: <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>,
                    title: 'Smart Document Upload',
                    description: 'Simply upload your W-2s, 1099s, and other tax documents. Our advanced OCR technology automatically extracts all the information you need.'
                },
                {
                    icon: <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>,
                    title: 'Auto-Fill Forms',
                    description: 'Your tax forms are automatically populated with extracted data. Just review, verify, and submit your federal and state returns.'
                },
                {
                    icon: <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>,
                    title: 'Bank-Level Security',
                    description: 'Your personal and financial information is protected with 256-bit SSL encryption and multiple layers of security protocols.'
                }
            ], []);

            return (
                <div className="min-h-screen fade-in">
                    {/* Hero Section */}
                    <section className="gradient-bg text-white py-20 relative overflow-hidden">
                        <div className="absolute inset-0">
                            <div className="absolute inset-0 bg-black opacity-10"></div>
                            <div className="absolute -top-10 -left-10 w-40 h-40 bg-white opacity-5 rounded-full blur-3xl"></div>
                            <div className="absolute -bottom-10 -right-10 w-60 h-60 bg-white opacity-5 rounded-full blur-3xl"></div>
                        </div>
                        
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
                            <div className="text-center">
                                <h1 className="text-4xl md:text-6xl font-bold mb-6 animate-float hero-text">
                                    File Your Taxes in Minutes
                                </h1>
                                <p className="text-xl md:text-2xl mb-8 text-gray-100 max-w-3xl mx-auto leading-relaxed">
                                    Upload your documents, auto-fill forms, and submit with confidence. 
                                    Our AI-powered platform makes tax filing simple and stress-free.
                                </p>
                                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                                    <Button 
                                        size="large"
                                        variant="outline"
                                        onClick={() => setCurrentPage(ROUTES.REGISTER)}
                                        className="transform hover:scale-105"
                                    >
                                        Start Filing Free
                                    </Button>
                                    <Button 
                                        size="large"
                                        variant="secondary"
                                        onClick={() => setCurrentPage(ROUTES.LOGIN)}
                                        className="bg-white/20 border-white/30 text-white hover:bg-white hover:text-indigo-600"
                                    >
                                        Sign In
                                    </Button>
                                </div>
                            </div>
                        </div>
                    </section>

                    {/* Stats Section */}
                    <section className="py-16 bg-white">
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                            <div className="text-center mb-12">
                                <h2 className="text-3xl font-bold text-gray-900 mb-4">Trusted by Thousands</h2>
                                <div className="h-20 flex items-center justify-center">
                                    <div className="text-center transition-all duration-500 ease-in-out">
                                        <div className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600 mb-2">
                                            {stats[currentStatIndex].value}{stats[currentStatIndex].suffix}
                                        </div>
                                        <div className="text-gray-600 font-medium">{stats[currentStatIndex].label}</div>
                                    </div>
                                </div>
                                <div className="flex justify-center space-x-2 mt-4">
                                    {stats.map((_, index) => (
                                        <div
                                            key={index}
                                            className={`w-2 h-2 rounded-full transition-all duration-300 ${
                                                index === currentStatIndex ? 'bg-indigo-600' : 'bg-gray-300'
                                            }`}
                                        />
                                    ))}
                                </div>
                            </div>
                        </div>
                    </section>

                    {/* Features Section */}
                    <section className="py-20 bg-gray-50">
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                            <div className="text-center mb-16">
                                <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
                                    Why Choose TaxEase?
                                </h2>
                                <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                                    Our advanced technology and user-friendly interface make tax filing effortless
                                </p>
                            </div>
                            <div className="grid md:grid-cols-3 gap-8">
                                {features.map((feature, index) => (
                                    <Card key={index} className="text-center p-8 feature-card" hover>
                                        <div className="w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-6">
                                            {feature.icon}
                                        </div>
                                        <h3 className="text-xl font-semibold mb-4 text-gray-900">{feature.title}</h3>
                                        <p className="text-gray-600 leading-relaxed">{feature.description}</p>
                                    </Card>
                                ))}
                            </div>
                        </div>
                    </section>

                    {/* How It Works Section */}
                    <section className="py-20 bg-white">
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                            <div className="text-center mb-16">
                                <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
                                    How It Works
                                </h2>
                                <p className="text-xl text-gray-600">
                                    Get your taxes done in three simple steps
                                </p>
                            </div>
                            <div className="grid md:grid-cols-3 gap-8">
                                {[
                                    {
                                        step: 1,
                                        title: 'Upload Documents',
                                        description: 'Drag and drop or click to upload your tax documents. We support W-2s, 1099s, receipts, and more.'
                                    },
                                    {
                                        step: 2,
                                        title: 'Review & Complete',
                                        description: 'Review auto-filled forms, make any necessary changes, and answer a few simple questions to maximize your refund.'
                                    },
                                    {
                                        step: 3,
                                        title: 'File & Get Refund',
                                        description: 'Submit your return electronically and track your refund status. Most refunds arrive within 21 days.'
                                    }
                                ].map((item, index) => (
                                    <div key={index} className="text-center">
                                        <div className="w-12 h-12 step-indicator rounded-full flex items-center justify-center mx-auto mb-4">
                                            <span className="text-white font-bold text-lg">{item.step}</span>
                                        </div>
                                        <h3 className="text-xl font-semibold mb-4 text-gray-900">{item.title}</h3>
                                        <p className="text-gray-600 leading-relaxed">{item.description}</p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </section>

                    {/* CTA Section */}
                    <section className="py-20 bg-gradient-to-br from-indigo-600 via-purple-600 to-indigo-800 text-white relative overflow-hidden">
                        <div className="absolute inset-0">
                            <div className="absolute top-0 left-0 w-full h-full bg-black opacity-10"></div>
                            <div className="absolute -top-4 -left-4 w-32 h-32 bg-white opacity-10 rounded-full blur-2xl"></div>
                            <div className="absolute -bottom-4 -right-4 w-48 h-48 bg-white opacity-10 rounded-full blur-2xl"></div>
                        </div>
                        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10">
                            <h2 className="text-3xl md:text-4xl font-bold mb-4">
                                Ready to File Your Taxes?
                            </h2>
                            <p className="text-xl mb-8 text-indigo-100 max-w-2xl mx-auto">
                                Join thousands of satisfied customers who trust TaxEase with their tax preparation. 
                                Start your free return today.
                            </p>
                            <Button 
                                size="large"
                                variant="outline"
                                onClick={() => setCurrentPage(ROUTES.REGISTER)}
                                className="transform hover:scale-105"
                            >
                                Get Started Today
                            </Button>
                        </div>
                    </section>
                </div>
            );
        };

        // Login Page Component
        const LoginPage = ({ setCurrentPage, user, setUser }) => {
            const [formData, setFormData] = useState({ email: '', password: '' });
            const [errors, setErrors] = useState({});
            const [isLoading, setIsLoading] = useState(false);
            const [showPassword, setShowPassword] = useState(false);

            const handleSubmit = async (e) => {
                e.preventDefault();
                
                // Validation
                const newErrors = {};
                if (!validateEmail(formData.email)) {
                    newErrors.email = 'Please enter a valid email address';
                }
                if (!formData.password) {
                    newErrors.password = 'Password is required';
                }

                if (Object.keys(newErrors).length > 0) {
                    setErrors(newErrors);
                    return;
                }

                setIsLoading(true);
                setErrors({});
                
                try {
                    // Mock login delay
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    setUser(prev => ({ ...prev, isLoggedIn: true }));
                    setCurrentPage(ROUTES.DASHBOARD);
                } catch (error) {
                    setErrors({ general: 'Login failed. Please try again.' });
                } finally {
                    setIsLoading(false);
                }
            };

            const handleInputChange = (field, value) => {
                setFormData(prev => ({ ...prev, [field]: value }));
                if (errors[field]) {
                    setErrors(prev => ({ ...prev, [field]: '' }));
                }
            };

            return (
                <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8 fade-in">
                    <div className="sm:mx-auto sm:w-full sm:max-w-md">
                        <div className="flex justify-center mb-6">
                            <Logo />
                        </div>
                        <h2 className="text-center text-3xl font-extrabold text-gray-900">
                            Welcome back
                        </h2>
                        <p className="mt-2 text-center text-sm text-gray-600">
                            Sign in to your TaxEase account
                        </p>
                    </div>

                    <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                        <Card className="py-8 px-4 sm:px-10">
                            <form className="space-y-6" onSubmit={handleSubmit}>
                                {errors.general && (
                                    <div className="bg-red-50 border border-red-200 rounded-md p-4">
                                        <div className="flex">
                                            <div className="flex-shrink-0">
                                                <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                                                </svg>
                                            </div>
                                            <div className="ml-3">
                                                <h3 className="text-sm font-medium text-red-800">
                                                    {errors.general}
                                                </h3>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                <Input
                                    label="Email address"
                                    type="email"
                                    autoComplete="email"
                                    required
                                    value={formData.email}
                                    onChange={(e) => handleInputChange('email', e.target.value)}
                                    error={errors.email}
                                    placeholder="Enter your email"
                                />

                                <div>
                                    <Input
                                        label="Password"
                                        type={showPassword ? 'text' : 'password'}
                                        autoComplete="current-password"
                                        required
                                        value={formData.password}
                                        onChange={(e) => handleInputChange('password', e.target.value)}
                                        error={errors.password}
                                        placeholder="Enter your password"
                                        inputClassName="pr-10"
                                    />
                                    <button
                                        type="button"
                                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                                        onClick={() => setShowPassword(!showPassword)}
                                        style={{ transform: 'translateY(-24px)' }}
                                    >
                                        <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            {showPassword ? (
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L8.464 8.464M18.536 8.464L9.878 9.878" />
                                            ) : (
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                            )}
                                        </svg>
                                    </button>
                                </div>

                                <div className="flex items-center justify-between">
                                    <div className="flex items-center">
                                        <input
                                            id="remember-me"
                                            name="remember-me"
                                            type="checkbox"
                                            className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                                        />
                                        <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                                            Remember me
                                        </label>
                                    </div>

                                    <div className="text-sm">
                                        <a href="#" className="font-medium text-indigo-600 hover:text-indigo-500 transition-colors">
                                            Forgot your password?
                                        </a>
                                    </div>
                                </div>

                                <div>
                                    <Button
                                        type="submit"
                                        className="w-full"
                                        disabled={isLoading}
                                        loading={isLoading}
                                    >
                                        {isLoading ? 'Signing in...' : 'Sign in'}
                                    </Button>
                                </div>
                            </form>

                            <div className="mt-6">
                                <div className="text-center">
                                    <span className="text-sm text-gray-600">
                                        Don't have an account?{' '}
                                        <button
                                            onClick={() => setCurrentPage(ROUTES.REGISTER)}
                                            className="font-medium text-indigo-600 hover:text-indigo-500 transition-colors"
                                        >
                                            Sign up for free
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </Card>
                    </div>
                </div>
            );
        };

        // Register Page Component
        const RegisterPage = ({ setCurrentPage, user, setUser }) => {
            const [currentStep, setCurrentStep] = useState(1);
            const [formData, setFormData] = useState({
                email: '',
                password: '',
                confirmPassword: '',
                firstName: '',
                lastName: '',
                dateOfBirth: '',
                phone: '',
                address: '',
                city: '',
                state: '',
                zipCode: '',
                ssn: '',
                agreeTerms: false
            });
            const [errors, setErrors] = useState({});
            const [isLoading, setIsLoading] = useState(false);

            const steps = useMemo(() => [
                { id: 1, title: 'Account Information', description: 'Create your login credentials' },
                { id: 2, title: 'Personal Information', description: 'Tell us about yourself' },
                { id: 3, title: 'Address Information', description: 'Where can we reach you?' },
                { id: 4, title: 'Final Step', description: 'Review and agree to terms' }
            ], []);

            const validateStep = (step) => {
                const newErrors = {};
                
                switch (step) {
                    case 1:
                        if (!validateEmail(formData.email)) {
                            newErrors.email = 'Please enter a valid email address';
                        }
                        if (!validatePassword(formData.password)) {
                            newErrors.password = 'Password must be at least 8 characters';
                        }
                        if (formData.password !== formData.confirmPassword) {
                            newErrors.confirmPassword = 'Passwords do not match';
                        }
                        break;
                    case 2:
                        if (!formData.firstName.trim()) {
                            newErrors.firstName = 'First name is required';
                        }
                        if (!formData.lastName.trim()) {
                            newErrors.lastName = 'Last name is required';
                        }
                        if (!formData.dateOfBirth) {
                            newErrors.dateOfBirth = 'Date of birth is required';
                        }
                        if (!formData.phone.trim()) {
                            newErrors.phone = 'Phone number is required';
                        }
                        break;
                    case 3:
                        if (!formData.address.trim()) {
                            newErrors.address = 'Address is required';
                        }
                        if (!formData.city.trim()) {
                            newErrors.city = 'City is required';
                        }
                        if (!formData.state) {
                            newErrors.state = 'State is required';
                        }
                        if (!formData.zipCode.trim()) {
                            newErrors.zipCode = 'ZIP code is required';
                        }
                        break;
                    case 4:
                        if (!formData.ssn.trim()) {
                            newErrors.ssn = 'SSN is required';
                        }
                        if (!formData.agreeTerms) {
                            newErrors.agreeTerms = 'You must agree to the terms';
                        }
                        break;
                }
                
                return newErrors;
            };

            const handleNext = () => {
                const stepErrors = validateStep(currentStep);
                if (Object.keys(stepErrors).length > 0) {
                    setErrors(stepErrors);
                    return;
                }
                
                setErrors({});
                if (currentStep < 4) {
                    setCurrentStep(currentStep + 1);
                }
            };

            const handlePrev = () => {
                setErrors({});
                if (currentStep > 1) {
                    setCurrentStep(currentStep - 1);
                }
            };

            const handleSubmit = async (e) => {
                e.preventDefault();
                
                const stepErrors = validateStep(currentStep);
                if (Object.keys(stepErrors).length > 0) {
                    setErrors(stepErrors);
                    return;
                }

                setIsLoading(true);
                
                try {
                    // Mock registration delay
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                    setUser(prev => ({ 
                        ...prev, 
                        isLoggedIn: true, 
                        name: `${formData.firstName} ${formData.lastName}`,
                        email: formData.email
                    }));
                    setCurrentPage(ROUTES.DASHBOARD);
                } catch (error) {
                    setErrors({ general: 'Registration failed. Please try again.' });
                } finally {
                    setIsLoading(false);
                }
            };

            const handleInputChange = (field, value) => {
                setFormData(prev => ({ ...prev, [field]: value }));
                if (errors[field]) {
                    setErrors(prev => ({ ...prev, [field]: '' }));
                }
            };

            const progressPercentage = (currentStep / 4) * 100;

            return (
                <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 py-12 px-4 sm:px-6 lg:px-8 fade-in">
                    <div className="max-w-md mx-auto">
                        <div className="text-center mb-8">
                            <Logo className="justify-center mb-6" />
                            <h2 className="text-3xl font-extrabold text-gray-900">Create Your Account</h2>
                            <p className="mt-2 text-sm text-gray-600">
                                {steps[currentStep - 1].title} - Step {currentStep} of 4
                            </p>
                            <p className="text-xs text-gray-500 mt-1">
                                {steps[currentStep - 1].description}
                            </p>
                        </div>

                        <ProgressBar 
                            value={progressPercentage} 
                            className="mb-8"
                        />

                        <Card className="p-6">
                            <form onSubmit={handleSubmit}>
                                {/* Step 1: Account Information */}
                                {currentStep === 1 && (
                                    <div className="space-y-4 slide-in">
                                        <Input
                                            label="Email"
                                            type="email"
                                            required
                                            value={formData.email}
                                            onChange={(e) => handleInputChange('email', e.target.value)}
                                            error={errors.email}
                                            placeholder="Enter your email"
                                        />
                                        <Input
                                            label="Password"
                                            type="password"
                                            required
                                            value={formData.password}
                                            onChange={(e) => handleInputChange('password', e.target.value)}
                                            error={errors.password}
                                            placeholder="Create a password"
                                            helpText="Must be at least 8 characters"
                                        />
                                        <Input
                                            label="Confirm Password"
                                            type="password"
                                            required
                                            value={formData.confirmPassword}
                                            onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                                            error={errors.confirmPassword}
                                            placeholder="Confirm your password"
                                        />
                                    </div>
                                )}

                                {/* Step 2: Personal Information */}
                                {currentStep === 2 && (
                                    <div className="space-y-4 slide-in">
                                        <div className="grid grid-cols-2 gap-4">
                                            <Input
                                                label="First Name"
                                                type="text"
                                                required
                                                value={formData.firstName}
                                                onChange={(e) => handleInputChange('firstName', e.target.value)}
                                                error={errors.firstName}
                                                placeholder="First name"
                                            />
                                            <Input
                                                label="Last Name"
                                                type="text"
                                                required
                                                value={formData.lastName}
                                                onChange={(e) => handleInputChange('lastName', e.target.value)}
                                                error={errors.lastName}
                                                placeholder="Last name"
                                            />
                                        </div>
                                        <Input
                                            label="Date of Birth"
                                            type="date"
                                            required
                                            value={formData.dateOfBirth}
                                            onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}
                                            error={errors.dateOfBirth}
                                        />
                                        <Input
                                            label="Phone Number"
                                            type="tel"
                                            required
                                            value={formData.phone}
                                            onChange={(e) => handleInputChange('phone', e.target.value)}
                                            error={errors.phone}
                                            placeholder="(555) 123-4567"
                                        />
                                    </div>
                                )}

                                {/* Step 3: Address */}
                                {currentStep === 3 && (
                                    <div className="space-y-4 slide-in">
                                        <Input
                                            label="Street Address"
                                            type="text"
                                            required
                                            value={formData.address}
                                            onChange={(e) => handleInputChange('address', e.target.value)}
                                            error={errors.address}
                                            placeholder="123 Main Street"
                                        />
                                        <div className="grid grid-cols-2 gap-4">
                                            <Input
                                                label="City"
                                                type="text"
                                                required
                                                value={formData.city}
                                                onChange={(e) => handleInputChange('city', e.target.value)}
                                                error={errors.city}
                                                placeholder="City"
                                            />
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                                    State
                                                </label>
                                                <select
                                                    required
                                                    value={formData.state}
                                                    onChange={(e) => handleInputChange('state', e.target.value)}
                                                    className={`w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors ${errors.state ? 'border-red-500' : ''}`}
                                                >
                                                    <option value="">Select State</option>
                                                    <option value="CA">California</option>
                                                    <option value="NY">New York</option>
                                                    <option value="TX">Texas</option>
                                                    <option value="FL">Florida</option>
                                                    <option value="IL">Illinois</option>
                                                </select>
                                                {errors.state && <p className="mt-1 text-sm text-red-600">{errors.state}</p>}
                                            </div>
                                        </div>
                                        <Input
                                            label="ZIP Code"
                                            type="text"
                                            required
                                            value={formData.zipCode}
                                            onChange={(e) => handleInputChange('zipCode', e.target.value)}
                                            error={errors.zipCode}
                                            placeholder="12345"
                                        />
                                    </div>
                                )}

                                {/* Step 4: SSN & Terms */}
                                {currentStep === 4 && (
                                    <div className="space-y-4 slide-in">
                                        <Input
                                            label="Social Security Number"
                                            type="password"
                                            required
                                            placeholder="XXX-XX-XXXX"
                                            value={formData.ssn}
                                            onChange={(e) => handleInputChange('ssn', e.target.value)}
                                            error={errors.ssn}
                                            helpText="Your SSN is encrypted and secure"
                                        />
                                        <div className="bg-blue-50 p-4 rounded-lg">
                                            <div className="flex items-start">
                                                <input
                                                    id="terms"
                                                    type="checkbox"
                                                    required
                                                    checked={formData.agreeTerms}
                                                    onChange={(e) => handleInputChange('agreeTerms', e.target.checked)}
                                                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded mt-1"
                                                />
                                                <label htmlFor="terms" className="ml-3 block text-sm text-gray-900">
                                                    I agree to the{' '}
                                                    <a href="#" className="text-indigo-600 hover:text-indigo-500 font-medium">
                                                        Terms of Service
                                                    </a>
                                                    {' '}and{' '}
                                                    <a href="#" className="text-indigo-600 hover:text-indigo-500 font-medium">
                                                        Privacy Policy
                                                    </a>
                                                </label>
                                            </div>
                                            {errors.agreeTerms && <p className="mt-1 text-sm text-red-600">{errors.agreeTerms}</p>}
                                        </div>
                                    </div>
                                )}

                                {/* Navigation Buttons */}
                                <div className="flex justify-between mt-8">
                                    {currentStep > 1 && (
                                        <Button
                                            type="button"
                                            variant="secondary"
                                            onClick={handlePrev}
                                        >
                                            Previous
                                        </Button>
                                    )}
                                    {currentStep < 4 ? (
                                        <Button
                                            type="button"
                                            onClick={handleNext}
                                            className="ml-auto"
                                        >
                                            Next
                                        </Button>
                                    ) : (
                                        <Button
                                            type="submit"
                                            className="ml-auto"
                                            disabled={isLoading}
                                            loading={isLoading}
                                        >
                                            {isLoading ? 'Creating Account...' : 'Create Account'}
                                        </Button>
                                    )}
                                </div>
                            </form>

                            <div className="mt-6 text-center">
                                <span className="text-sm text-gray-600">
                                    Already have an account?{' '}
                                    <button
                                        onClick={() => setCurrentPage(ROUTES.LOGIN)}
                                        className="font-medium text-indigo-600 hover:text-indigo-500 transition-colors"
                                    >
                                        Sign in
                                    </button>
                                </span>
                            </div>
                        </Card>
                    </div>
                </div>
            );
        };

        // Dashboard Component
        const DashboardPage = ({ setCurrentPage }) => {
            const [notifications, setNotifications] = useState(MOCK_DATA.notifications);
            const [selectedTimeframe, setSelectedTimeframe] = useState('current');

            const handleDismissNotification = useCallback((notificationId) => {
                setNotifications(prev => prev.filter(n => n.id !== notificationId));
            }, []);

            const quickActions = useMemo(() => [
                {
                    id: 'upload',
                    icon: <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>,
                    title: 'Upload Documents',
                    description: 'Add W-2s, 1099s, and other tax documents',
                    onClick: () => alert('Documents page coming soon!')
                },
                {
                    id: 'forms',
                    icon: <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>,
                    title: 'Continue Tax Forms',
                    description: 'Complete your 1040 and state returns',
                    onClick: () => alert('Tax forms page coming soon!')
                },
                {
                    id: 'review',
                    icon: <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>,
                    title: 'Review & Submit',
                    description: 'Final review before filing',
                    onClick: () => alert('Review page coming soon!')
                }
            ], []);

            const statusCards = useMemo(() => [
                {
                    title: 'Federal Return',
                    value: 'Ready',
                    progress: 85,
                    status: 'success',
                    icon: <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                },
                {
                    title: 'State Return (CA)',
                    value: 'In Progress',
                    progress: 65,
                    status: 'progress',
                    icon: <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                },
                {
                    title: 'Federal Refund',
                    value: formatCurrency(MOCK_DATA.taxSummary.federalRefund),
                    progress: 100,
                    status: 'success',
                    icon: <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                    </svg>
                },
                {
                    title: 'State Refund',
                    value: formatCurrency(MOCK_DATA.taxSummary.stateRefund),
                    progress: 100,
                    status: 'success',
                    icon: <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                    </svg>
                }
            ], []);

            return (
                <div className="min-h-screen bg-gray-50 py-8 fade-in">
                    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        {/* Header */}
                        <div className="mb-8">
                            <h1 className="text-3xl font-bold text-gray-900">Welcome back, John!</h1>
                            <p className="mt-1 text-sm text-gray-600">
                                Here's your tax filing progress for 2023.
                            </p>
                        </div>

                        {/* Status Cards */}
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                            {statusCards.map((card, index) => (
                                <Card key={index} className="p-6" hover>
                                    <div className="flex items-center justify-between mb-4">
                                        <div>
                                            <p className="text-sm font-medium text-gray-600">{card.title}</p>
                                            <p className={`text-2xl font-bold ${
                                                card.status === 'success' ? 'text-green-600' : 'text-gray-900'
                                            }`}>
                                                {card.value}
                                            </p>
                                        </div>
                                        <div className={`p-3 rounded-full ${
                                            card.status === 'success' ? 'status-complete' : 'status-progress'
                                        }`}>
                                            {card.icon}
                                        </div>
                                    </div>
                                    <div className="space-y-2">
                                        <div className="flex justify-between items-center">
                                            <span className="text-xs text-gray-500">Progress</span>
                                            <span className="text-xs font-medium text-gray-700">{card.progress}%</span>
                                        </div>
                                        <div className="w-full bg-gray-200 rounded-full h-2">
                                            <div 
                                                className={`h-2 rounded-full progress-bar ${
                                                    card.status === 'success' ? 'bg-green-600' : 'bg-blue-600'
                                                }`}
                                                style={{ width: `${card.progress}%` }}
                                            />
                                        </div>
                                    </div>
                                </Card>
                            ))}
                        </div>

                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                            {/* Quick Actions */}
                            <div className="lg:col-span-2">
                                <Card className="p-6">
                                    <div className="flex items-center justify-between mb-6">
                                        <h2 className="text-lg font-semibold text-gray-900">Quick Actions</h2>
                                        <span className="text-sm text-gray-500">Get started with these tasks</span>
                                    </div>
                                    <div className="space-y-3">
                                        {quickActions.map((action) => (
                                            <button
                                                key={action.id}
                                                onClick={action.onClick}
                                                className="w-full flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 hover:border-gray-300 transition-all duration-200 group"
                                            >
                                                <div className="flex-shrink-0 group-hover:scale-110 transition-transform">
                                                    {action.icon}
                                                </div>
                                                <div className="ml-4 text-left flex-1">
                                                    <p className="text-sm font-medium text-gray-900">{action.title}</p>
                                                    <p className="text-xs text-gray-500 mt-1">{action.description}</p>
                                                </div>
                                                <div className="ml-auto opacity-0 group-hover:opacity-100 transition-opacity">
                                                    <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                                    </svg>
                                                </div>
                                            </button>
                                        ))}
                                    </div>
                                </Card>
                            </div>

                            {/* Tax Summary */}
                            <div>
                                <Card className="p-6">
                                    <h2 className="text-lg font-semibold text-gray-900 mb-4">Tax Summary</h2>
                                    <div className="space-y-4">
                                        <div className="flex justify-between items-center">
                                            <span className="text-sm text-gray-600">Total Income</span>
                                            <span className="text-sm font-medium">{formatCurrency(MOCK_DATA.taxSummary.totalIncome)}</span>
                                        </div>
                                        <div className="flex justify-between items-center">
                                            <span className="text-sm text-gray-600">Federal Tax</span>
                                            <span className="text-sm font-medium">{formatCurrency(MOCK_DATA.taxSummary.federalTax)}</span>
                                        </div>
                                        <div className="flex justify-between items-center">
                                            <span className="text-sm text-gray-600">State Tax (CA)</span>
                                            <span className="text-sm font-medium">{formatCurrency(MOCK_DATA.taxSummary.stateTax)}</span>
                                        </div>
                                        <div className="flex justify-between items-center">
                                            <span className="text-sm text-gray-600">Total Withheld</span>
                                            <span className="text-sm font-medium">{formatCurrency(MOCK_DATA.taxSummary.totalWithheld)}</span>
                                        </div>
                                        <div className="border-t pt-4">
                                            <div className="refund-highlight rounded-lg p-4">
                                                <div className="flex justify-between items-center mb-2">
                                                    <span className="text-sm font-medium text-green-800">Federal Refund</span>
                                                    <span className="text-lg font-bold text-green-600">{formatCurrency(MOCK_DATA.taxSummary.federalRefund)}</span>
                                                </div>
                                                <div className="flex justify-between items-center">
                                                    <span className="text-sm font-medium text-green-800">State Refund</span>
                                                    <span className="text-lg font-bold text-green-600">{formatCurrency(MOCK_DATA.taxSummary.stateRefund)}</span>
                                                </div>
                                            </div>
                                        </div>
                                        <div className="text-center pt-4">
                                            <div className="text-xs text-gray-500">Effective Tax Rate</div>
                                            <div className="text-2xl font-bold text-gray-900">{MOCK_DATA.taxSummary.effectiveRate}%</div>
                                        </div>
                                    </div>
                                </Card>
                            </div>
                        </div>

                        {/* Recent Activity */}
                        <div className="mt-8">
                            <Card className="p-6">
                                <div className="flex items-center justify-between mb-6">
                                    <h2 className="text-lg font-semibold text-gray-900">Recent Activity</h2>
                                    <button className="text-sm text-indigo-600 hover:text-indigo-500 font-medium">
                                        View All
                                    </button>
                                </div>
                                <div className="space-y-4">
                                    {notifications.slice(0, 3).map((notification) => (
                                        <Notification
                                            key={notification.id}
                                            notification={notification}
                                            onClose={() => handleDismissNotification(notification.id)}
                                        />
                                    ))}
                                    {notifications.length === 0 && (
                                        <div className="text-center py-8 text-gray-500">
                                            <svg className="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                                            </svg>
                                            <p className="text-sm">No recent activity</p>
                                        </div>
                                    )}
                                </div>
                            </Card>
                        </div>
                    </div>
                </div>
            );
        };

        // Main App Component
        const App = () => {
            const [currentPage, setCurrentPage] = useState(ROUTES.HOME);
            const [user, setUser] = useLocalStorage('taxease_user', MOCK_DATA.user);

            const renderPage = useCallback(() => {
                switch(currentPage) {
                    case ROUTES.HOME:
                        return <HomePage setCurrentPage={setCurrentPage} />;
                    case ROUTES.LOGIN:
                        return <LoginPage setCurrentPage={setCurrentPage} user={user} setUser={setUser} />;
                    case ROUTES.REGISTER:
                        return <RegisterPage setCurrentPage={setCurrentPage} user={user} setUser={setUser} />;
                    case ROUTES.DASHBOARD:
                        return user.isLoggedIn ? <DashboardPage setCurrentPage={setCurrentPage} /> : <LoginPage setCurrentPage={setCurrentPage} user={user} setUser={setUser} />;
                    default:
                        return <HomePage setCurrentPage={setCurrentPage} />;
                }
            }, [currentPage, user, setUser]);

            // Redirect to login if trying to access protected routes
            useEffect(() => {
                const protectedRoutes = [ROUTES.DASHBOARD, ROUTES.DOCUMENTS, ROUTES.FORMS, ROUTES.REVIEW, ROUTES.PAYMENT];
                if (protectedRoutes.includes(currentPage) && !user.isLoggedIn) {
                    setCurrentPage(ROUTES.LOGIN);
                }
            }, [currentPage, user.isLoggedIn]);

            return (
                <div className="min-h-screen bg-gray-50">
                    <Navigation 
                        currentPage={currentPage} 
                        setCurrentPage={setCurrentPage} 
                        user={user} 
                        setUser={setUser} 
                    />
                    <main>
                        {renderPage()}
                    </main>
                </div>
            );
        };

        // Error boundary component
        class ErrorBoundary extends React.Component {
            constructor(props) {
                super(props);
                this.state = { hasError: false, error: null };
            }

            static getDerivedStateFromError(error) {
                return { hasError: true, error };
            }

            componentDidCatch(error, errorInfo) {
                console.error('TaxEase App Error:', error, errorInfo);
            }

            render() {
                if (this.state.hasError) {
                    return (
                        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                            <div className="text-center">
                                <h1 className="text-2xl font-bold text-gray-900 mb-4">Something went wrong</h1>
                                <p className="text-gray-600 mb-4">We're sorry, but something went wrong. Please refresh the page and try again.</p>
                                <button 
                                    onClick={() => window.location.reload()}
                                    className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
                                >
                                    Refresh Page
                                </button>
                            </div>
                        </div>
                    );
                }

                return this.props.children;
            }
        }

        // Initialize the app
        const rootElement = document.getElementById('root');
        if (rootElement) {
            const root = ReactDOM.createRoot ? ReactDOM.createRoot(rootElement) : ReactDOM.render;
            
            if (ReactDOM.createRoot) {
                root.render(
                    <ErrorBoundary>
                        <App />
                    </ErrorBoundary>
                );
            } else {
                root(
                    <ErrorBoundary>
                        <App />
                    </ErrorBoundary>,
                    rootElement
                );
            }
        }
    </script>
</body>
</html>
